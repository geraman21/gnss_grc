id: gnss_nav_solution
label: Nav Solution
category: "[gnss]"

templates:
  imports: import gnss
  make: gnss.nav_solution()

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
# parameters:
# - id: parametername_replace_me
#   label: FIX ME:
#   dtype: string
#   value: You need to fill in your grc/gnss_nav_solution.block.yaml
#- id: ...
#  label: ...
#  dtype: ...

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
  - label: Channel 0
    dtype: float
    optional: true
  - label: Channel 1
    dtype: float
    optional: true
  - label: Channel 2
    dtype: float
    optional: true
  - label: Channel 3
    dtype: float
    optional: true
  - label: Channel 4
    dtype: float
    optional: true
  - label: Channel 5
    dtype: float
    optional: true
  - label: Channel 6
    dtype: float
    optional: true
  - label: Channel 7
    dtype: float
    optional: true
  - domain: message
    id: ephemeris
    optional: true
    hide: false

outputs:
  - label: out
    dtype: float
    optional: true

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
